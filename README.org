#+title: Org Reveal Enhancements


* MVP Goal

Use an org file to generate a simple presentation that uses [[https://revealjs.com/auto-animate/][RevealJS Auto-Animate]] with some SVG images.
There are some interesting ideas that could be presentated in a totally new way with this technology.

* Why?

Creating a solution for the above goal provides enough scope that will require learning more about org-mode, emacs lisp and how an Abstract Syntax Tree (AST) works.

* Status

It's in a very "alpha" state that can provide a very simple revealjs HTML presentation! Each 'element' listed inside of [[./examples/simple-presentation.org][simple-presentation.org]] can now be placed on a slide with other 'elements' and be 'animated' between slides with minor changes.

#+begin_example
<section data-auto-animate style="height: 90vh;">
<div data-id="triangle1" data-auto-animate-duration="2" style="position: absolute; top: 1%; left: 50%;">
<svg xmlns="http://www.w3.org/2000/svg" role="img" height="100" width="100">
  <polyline points="50 20 20 80 80 80 50 20" stroke="black" fill="blue" stroke-width="3"/>
</svg>
</div>
<div data-id="square1" data-auto-animate-duration="0.5" style="position: absolute; top: 62%; left: 50%;">
<svg xmlns="http://www.w3.org/2000/svg" role="img" height="100" width="100">
  <rect x="10" y="10" width="80" height="80" stroke="black" fill="green" stroke-width="3"/>
</svg>
</div>
<div data-id="circle1" data-auto-animate-duration="1" style="position: absolute; top: 1%; left: 1%;">
<svg xmlns="http://www.w3.org/2000/svg" role="img" height="100" width="100">
  <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
</svg>
</div>
</section>
#+end_example

The data structures are still being explored and subject to redesign as I learn more. Each set of =ore_= properties will render another 'element' for that slide.

#+begin_example
:PROPERTIES:
:ORE: ORN
:ore_01: {"id":"circle1","file":"images/circle1.svg","x":"1","y":"1","size":"1","speed":"1"}
:ore_02: {"id":"square1","file":"images/square1.svg","x":"50","y":"62","size":"1","speed":"0.5"}
:ore_03: {"id":"triangle1","file":"images/triangle1.svg","x":"50","y":"1","size":"1","speed":"2"}
:END:
#+end_example


* Resources

- [[https://orgmode.org/worg/dev/org-element-api.html][Org Element API (orgmode.org)]]
- [[http://ergoemacs.org/emacs/elisp_parse_org_mode.html][Elisp: Parse Org Mode (ergoemacs.org)]]
- [[https://orgmode.org/manual/Command-and-Function-Index.html][Command and Function Index (orgmode.org)]]

* Org-mode functions

- =org-element-parse-buffer=
- =org-entry-properties=
- =org-element-property=
- =org-element-map=

* =ore.el=

=ore.el= is the project lisp package.

* Lessons
** #1

Creating an AST of an org file isn't that hard as shown in the following snippet (with a small part of the first section).

#+begin_src elisp
(org-element-parse-buffer)
#+end_src

#+begin_example
(org-data nil
          (section
           (:begin 1 :end 36 :contents-begin 1 :contents-end 34 :post-blank 2 :post-affiliated 1 :parent #0)
           (keyword
            (:key "TITLE" :value "Org Reveal Enhancements" :begin 1 :end 34 :post-blank 0 :post-affiliated 1 :parent #1)))
          (headline
           (:raw-value "MVP Goal" :begin 36 :end 295 :pre-blank 1 :contents-begin 48 :contents-end 294 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36 :title
                       (#("MVP Goal" 0 8
                          (:parent #1)))
                       :parent #0)
#+end_example

The real problem is the amount of information included in the =org-data= strucuture.
Even though it's overwhelming to start with the authors of org-mode have created some helpful functions.
The most helpful function so far has been =org-entry-properties= which "Get all properties of the current entry."
The only issue when using it is that it's based on where the /point/ is located in the document.
So, to use it I've had to use =goto-char= to relocate the /point/ to different headings (slides) through the document.

As I hit various problems I just need to work through the documentation, explore and test snippets of lisp as I break the data structures and problems futher apart.
Still lots to learn!!
